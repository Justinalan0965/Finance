REGISTRATION FORM:::

CHECKING FOR ERRORS IN REGISTRATION FORM:

• If any field is left blank, return an apology
• If password and confirmation don't match, return
an apology
• If the username is already taken, return an apology

SECURITY:

• Database should never store plain text password
• Use generate _ password _ hash to generate a hash of
the password

ADD USER TO DATABSE:

• Use db. execute to execute a SQL statement
• Use ? in statement as placeholders for values

LOG USERR IN:

• session["user_id"] keeps track of which user is logged in


QUOTE ROUTE IN app.py:::

QUOTE:

• Get symbol(text field) from the user 
• When requested via GET, display form to request a
stock quote
• When form is submitted via POST, lookup the stock
symbol by calling the lookup function, and display the
results

LOOKUP:

• lookup takes a stock symbol and returns a stock quote
• If lookup is successful, function returns a dictionary
with name, price, symbol
• If lookup is unsuccessful, function returns None

Passing Values Into Templates:

Python - return render _ template( "hello. html",name="Brain")

Jinja Template - <p>hello,{ { name } }</p>

BUY:::

BUY:

• When requested via GET, display form to buy a stock
• When form is submitted via POST, purchase the stock so
long as the user can afford it

BUY FORM:

• Ask for symbol and number of shares
• Check for valid input

ERRORS:

• Should not allow negative values
• User should enter a valid stock symbol/name

** Create a new table **

ADD STOCK TO PORTFOLIO:

• Ensure user has enough cash to afford the stock
• If user can't afford stock, return an apology
• Run SQL statement on database to purchase stock
Update cash to reflect purchased stock

INDEX PAGE:::

INDEX:

• Display HTML table with.
• all stocks owned
• number of shares of each stock
• current price of each stock
• total value of each holding
• Display the user's current cash balance
• Display total value of stocks and cash together

Eg for loop(jinja syntax):

{% for contact in contacts %}
<p> { { contact. name } } lives in { { contact.house } }</P>
{ % endfor % }

SELL:::

• When requested via GET, display form to sell a stock
• When form is submitted via POST, check for errors and
sell the specified number of shares of stock and update
the user's cash

HISTORY:::

what stock was bought and sold?, how many stocks were bought and sold?, 
And when that transaction actually took place?

• Display a table with a history of all transaction's, listing
one row for every buy and every sell
• Implementation depends on how your database is
structured

** 
Add Additional features like 
-> Allow users to change password
-> Allow users to add cash

**